type: edu
files:
- name: web/app.py
  visible: true
  text: |
    from flask import Flask
    import sys

    app = Flask(__name__)

    # don't change the following way to run flask:
    if __name__ == '__main__':
        if len(sys.argv) > 1:
            arg_host, arg_port = sys.argv[1].split(':')
            app.run(host=arg_host, port=arg_port)
        else:
            app.run()
  learner_created: false
- name: test/__init__.py
  visible: false
  learner_created: false
- name: test/tests.py
  visible: false
  text: |
    import asyncio
    import os

    from hstest import FlaskTest, CheckResult, WrongAnswer
    from hstest import dynamic_test
    from hstest.dynamic.security.exit_handler import ExitHandler
    from pyppeteer import launch


    class FlaskProjectTest(FlaskTest):
        source = 'web.app'
        run_args = {
            "headless": False,
            "defaultViewport": None,
            "args": ['--start-maximized', '--disable-infobar', '--no-sandbox'],
            "ignoreDefaultArgs": ['--enable-automation'],
        }

        async def launch_and_get_browser(self):
            try:
                return await launch(self.run_args)
            except Exception as error:
                raise WrongAnswer(str(error))

        async def close_browser(self, browser):
            try:
                await browser.close()
            except Exception as ex:
                print(ex)

        async def get_input_field(self, page):
            input_field = await page.querySelector('input#input-city')
            if input_field is None:
                raise WrongAnswer("Can't find input field with 'input-city' id!")
            return input_field

        async def get_submit_button(self, page):
            button = await page.querySelector('button.submit-button')
            if button is None:
                raise WrongAnswer("Can't find a button with 'submit-button' class!")
            return button

        def generate(self):
            try:
                if os.path.exists('web/weather.db'):
                    os.remove('web/weather.db')
            except Exception as ignored:
                raise WrongAnswer(f"Looks like your 'weather.db' database file is blocked. "
                                  f"Stop your apps that connects to that database!")
            return []

        @classmethod
        async def check_cards_in_the_page(cls, page, cards_number):
            cards = await page.querySelectorAll('div.card')

            if len(cards) != cards_number:
                raise WrongAnswer(f"Found {len(cards)} <div> blocks with class 'card', but should be {cards_number}!")

            for card in cards:
                degrees = await card.querySelector('div.degrees')
                if degrees is None:
                    raise WrongAnswer(
                        "One of the <div> blocks with card class 'card' doesn't contain <div> block with class 'degrees'")
                state = await card.querySelector('div.state')
                if state is None:
                    raise WrongAnswer(
                        "One of the <div> blocks with card class 'card' doesn't contain <div> block with class 'state'")
                city = await card.querySelector('div.city')
                if city is None:
                    raise WrongAnswer(
                        "One of the <div> blocks with card class 'card' doesn't contain <div> block with class 'city'")

        async def test_response_async(self):
            browser = await self.launch_and_get_browser()
            page = await browser.newPage()
            try:
                await page.goto(self.get_url())
            except Exception:
                raise WrongAnswer(f"Can't access the main page with URL '{self.get_url()}'")
            await self.close_browser(browser)

        @dynamic_test(order=1, time_limit=-1)
        def test_response(self):
            ExitHandler.revert_exit()
            asyncio.new_event_loop().run_until_complete(self.test_response_async())
            return CheckResult.correct()

        async def test_main_page_structure_async(self):
            browser = await self.launch_and_get_browser()
            page = await browser.newPage()

            await page.goto(self.get_url())

            cards_div = await page.querySelector('div.cards')

            if cards_div is None:
                raise WrongAnswer("Can't find <div> block with class 'cards'")

            button = await self.get_submit_button(page)

            if button is None:
                raise WrongAnswer("Can't find a button with 'submit-button' class!")

            input_field = await self.get_input_field(page)

            if input_field is None:
                raise WrongAnswer("Can't find input field with 'input-city' id!")

            await self.check_cards_in_the_page(page, 0)

            await browser.close()

            return CheckResult.correct()

        @dynamic_test(order=2)
        def test_main_page_structure(self):
            asyncio.new_event_loop().run_until_complete(self.test_main_page_structure_async())
            return CheckResult.correct()

        async def test_add_city_async(self):
            browser = await self.launch_and_get_browser()
            page = await browser.newPage()
            await page.goto(self.get_url())

            input_field = await self.get_input_field(page)
            await input_field.type('London')

            button = await self.get_submit_button(page)

            await asyncio.gather(
                page.waitForNavigation(),
                button.click(),
            )

            cards_div = await page.querySelector('div.cards')

            if cards_div is None:
                raise WrongAnswer("Can't find <div> block with class 'cards'")

            await self.check_cards_in_the_page(page, 1)

        @dynamic_test(order=3)
        def test_add_city(self):
            asyncio.new_event_loop().run_until_complete(self.test_add_city_async())
            return CheckResult.correct()

        async def test_city_name_after_adding_async(self):

            browser = await self.launch_and_get_browser()
            page = await browser.newPage()
            await page.goto(self.get_url())

            input_field = await self.get_input_field(page)
            await input_field.type('Fairbanks')

            button = await self.get_submit_button(page)

            await asyncio.gather(
                page.waitForNavigation(),
                button.click(),
            )

            cards_div = await page.querySelector('div.cards')

            if cards_div is None:
                raise WrongAnswer("Can't find <div> block with class 'cards'")

            await self.check_cards_in_the_page(page, 2)

        @dynamic_test(order=4)
        def test_city_name_after_adding(self):
            asyncio.new_event_loop().run_until_complete(self.test_city_name_after_adding_async())
            return CheckResult.correct()

        async def test_refresh_async(self):
            browser = await self.launch_and_get_browser()
            page = await browser.newPage()
            await page.goto(self.get_url())

            input_field = await self.get_input_field(page)
            await input_field.type('Idaho')

            button = await self.get_submit_button(page)

            await asyncio.gather(
                page.waitForNavigation(),
                button.click(),
            )

            cards_div = await page.querySelector('div.cards')

            if cards_div is None:
                raise WrongAnswer("Can't find <div> block with class 'cards'")

            await self.check_cards_in_the_page(page, 3)

            await page.reload()

            await self.check_cards_in_the_page(page, 3)

        @dynamic_test(order=5)
        def test_refresh(self):
            asyncio.new_event_loop().run_until_complete(self.test_refresh_async())
            return CheckResult.correct()


    if __name__ == '__main__':
        FlaskProjectTest().run_tests()
  learner_created: false
- name: tests.py
  visible: false
  text: |
    from test.tests import FlaskProjectTest

    if __name__ == '__main__':
        FlaskProjectTest().run_tests()
  learner_created: false
- name: web/test_app.py
  visible: true
  text: |
    from flask import Flask, render_template
    import sys

    app = Flask(__name__)


    @app.route('/', methods=['GET', 'POST'])
    def index():
        return render_template("index.html")


    # don't change the following way to run flask:
    if __name__ == '__main__':
        if len(sys.argv) > 1:
            arg_host, arg_port = sys.argv[1].split(':')
            app.run(host=arg_host, port=arg_port)
        else:
            app.run()
  learner_created: true
- name: web/weather.py
  visible: true
  text: |-
    import requests
    from datetime import datetime

    API_KEY = "a78f9eaffa1c9564cff63147b153abbe"


    def get_coordinates(city_name):
        """
            Function returns coordinates of the city
        :param city_name:
            The name of the city
        :return:
            Tuple (latitude, longitude)
        """
        r = requests.get(f"http://api.openweathermap.org/geo/1.0/direct?q={city_name}&limit=1&appid={API_KEY}")
        data_dict = r.json()[0]
        return data_dict['lat'], data_dict['lon']


    def get_weather(city_name):
        """
        Fetches weather data for provided city.
        :param city_name:
            The name of the city to get weather for
        :return:
            Dictionary with data:
            'temperature' — temperature in Celsius
            'time' — time, only an hour value
            'city_name' — city name
            'description' — weather description
            'time_of_day' — time of day: day, evening-morning or night
        """
        lat, lon = get_coordinates(city_name)
        r = requests.get(f"https://api.openweathermap.org/data/2.5/weather?lat={lat}&lon={lon}&appid={API_KEY}&units=metric")
        data_dict = r.json()

        time = datetime.utcfromtimestamp(data_dict['dt']).hour
        temperature = data_dict['main']['temp']
        city_name = data_dict['name']
        description = data_dict['weather'][0]['description']

        if 12 <= time <= 18:
            time_of_day = 'day'
        elif 18 < time < 23 or 6 < time < 12:
            time_of_day = 'evening-morning'
        else:
            time_of_day = 'night'

        return {'time': time, 'time_of_day': time_of_day, 'temperature': temperature, 'city_name': city_name, 'description': description}


    if __name__ == '__main__':
        city = input("Enter city name: ")
        print(get_weather(city))
  learner_created: true
- name: web/templates/layout.html
  visible: true
  text: |-
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <title>Weather App</title>
        <link rel="shortcut icon" href="https://img.icons8.com/fluent/48/000000/rainy-weather.png" type="image/x-icon"/>
        <link rel="stylesheet"
              href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.0/css/bootstrap.min.css"
              integrity="sha384-9aIt2nRpC12Uk9gS9baDl411NQApFmC26EwAOH8WgZl5MYYxFfc+NcPb1dKGj7Sk"
              crossorigin="anonymous">
        <link href="https://fonts.googleapis.com/css2?family=Open+Sans:wght@400;600&display=swap" rel="stylesheet">
        <link rel="stylesheet" href="{{ url_for('static', filename='style.css') }}">
    </head>
    <body>
    <div class="form">
        {% with message = get_flashed_messages() %}
        {% if message %}
        <div class="alert alert-primary" role="alert">
            {{message[0]}}
        </div>
        {% endif %}
        {% endwith %}
        <form action="/" method="POST">
            <input type="text" placeholder="Enter a city name" name="city_name" id="input-city">
            <button type="submit" class="submit-button">Add</button>
        </form>
    </div>
    {% block cards %}
    {% endblock %}
    </body>
    </html>
  learner_created: true
- name: web/weather.db
  visible: true
  learner_created: true
- name: web/instance/weather.db
  visible: true
  learner_created: true
- name: instance/weather.db
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/12328#comment
status: Solved
feedback:
  message: Congratulations!
  time: "Sun, 09 Apr 2023 07:00:27 UTC"
record: 4
